                     
                     
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 179 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                           
  [36m[22m[24m  infra/docker-compose.yml[0m
    ‚ùØ‚ù± [1myaml.docker-compose.security.no-new-privileges.no-new-privileges[0m
          Service 'juice-shop' allows for privilege escalation via setuid or setgid
          binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.
          Details: https://sg.run/0n8q                                             
                                                                                   
            4‚îÜ juice-shop:
   
    ‚ùØ‚ù± [1myaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service[0m
          Service 'juice-shop' is running with a writable root filesystem. This may allow
          malicious applications to download and run additional payloads, or modify      
          container files. If an application inside a container has to save something    
          temporarily consider using a tmpfs. Add 'read_only: true' to this service to   
          prevent this.                                                                  
          Details: https://sg.run/e4JE                                                   
                                                                                         
            4‚îÜ juice-shop:
                                                                              
  [36m[22m[24m  venv/lib/python3.12/site-packages/anyio/_core/_eventloop.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
          164‚îÜ module = import_module(f"anyio._backends._{asynclib_name}")
                                                                         
  [36m[22m[24m  venv/lib/python3.12/site-packages/anyio/streams/tls.py[0m
    ‚ùØ‚ù± [1mpython.django.security.audit.query-set-extra.avoid-query-set-extra[0m
          QuerySet.extra' does not provide safeguards against SQL injection and requires    
          very careful use. SQL injection can lead to critical data being stolen by         
          attackers. Instead of using '.extra', use the Django ORM and parameterized queries
          such as `People.objects.get(name='Bob')`.                                         
          Details: https://sg.run/kXZP                                                      
                                                                                            
          247‚îÜ tls_version = self.extra(TLSAttribute.tls_version)
                                                                            
  [36m[22m[24m  venv/lib/python3.12/site-packages/anyio/to_interpreter.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. 
          When unpickling, the serialized data could be manipulated to run arbitrary code.
          Instead, consider serializing the relevant data as JSON or a similar text-based 
          serialization format.                                                           
          Details: https://sg.run/OPwB                                                    
                                                                                          
          114‚îÜ item = pickle.dumps((func, args), pickle.HIGHEST_PROTOCOL)
            ‚ãÆ‚îÜ----------------------------------------
          123‚îÜ res = pickle.loads(res)
                                                                        
  [36m[22m[24m  venv/lib/python3.12/site-packages/anyio/to_process.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. 
          When unpickling, the serialized data could be manipulated to run arbitrary code.
          Instead, consider serializing the relevant data as JSON or a similar text-based 
          serialization format.                                                           
          Details: https://sg.run/OPwB                                                    
                                                                                          
           86‚îÜ retval = pickle.loads(pickled_response)
            ‚ãÆ‚îÜ----------------------------------------
           95‚îÜ request = pickle.dumps(("run", func, args),
               protocol=pickle.HIGHEST_PROTOCOL)          
            ‚ãÆ‚îÜ----------------------------------------
          159‚îÜ pickled = pickle.dumps(
          160‚îÜ     ("init", sys.path, main_module_path),
          161‚îÜ     protocol=pickle.HIGHEST_PROTOCOL,
          162‚îÜ )
            ‚ãÆ‚îÜ----------------------------------------
          210‚îÜ command, *args = pickle.load(stdin.buffer)
            ‚ãÆ‚îÜ----------------------------------------
          240‚îÜ pickled = pickle.dumps(exception, pickle.HIGHEST_PROTOCOL)
            ‚ãÆ‚îÜ----------------------------------------
          243‚îÜ pickled = pickle.dumps(retval, pickle.HIGHEST_PROTOCOL)
            ‚ãÆ‚îÜ----------------------------------------
          247‚îÜ pickled = pickle.dumps(exc, pickle.HIGHEST_PROTOCOL)
                                                                  
  [36m[22m[24m  venv/lib/python3.12/site-packages/attr/_make.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ZvrD                                                      
                                                                                            
          227‚îÜ eval(bytecode, globs, locs)
   
     ‚ù± [1mpython.lang.security.audit.dangerous-annotations-usage.dangerous-annotations-usage[0m
          Annotations passed to `typing.get_type_hints` are evaluated in `globals` and
          `locals` namespaces. Make sure that no arbitrary value can be written as the
          annotation and passed to `typing.get_type_hints` function.                  
          Details: https://sg.run/8R6J                                                
                                                                                      
          3096‚îÜ self.__call__.__annotations__["return"] = rt
            ‚ãÆ‚îÜ----------------------------------------
          3349‚îÜ pipe_converter.__annotations__["val"] = t
            ‚ãÆ‚îÜ----------------------------------------
          3358‚îÜ pipe_converter.__annotations__["return"] = rt
                                                                       
  [36m[22m[24m  venv/lib/python3.12/site-packages/attr/converters.py[0m
     ‚ù± [1mpython.lang.security.audit.dangerous-annotations-usage.dangerous-annotations-usage[0m
          Annotations passed to `typing.get_type_hints` are evaluated in `globals` and
          `locals` namespaces. Make sure that no arbitrary value can be written as the
          annotation and passed to `typing.get_type_hints` function.                  
          Details: https://sg.run/8R6J                                                
                                                                                      
           54‚îÜ optional_converter.__annotations__["val"] = typing.Optional[t]
            ‚ãÆ‚îÜ----------------------------------------
           58‚îÜ optional_converter.__annotations__["return"] = typing.Optional[rt]
                                                                         
  [36m[22m[24m  venv/lib/python3.12/site-packages/boltons/funcutils.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ndRX                                                      
                                                                                            
          1035‚îÜ exec(code, execdict)
                                                                          
  [36m[22m[24m  venv/lib/python3.12/site-packages/boltons/namedutils.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ndRX                                                      
                                                                                            
           68‚îÜ exec(code, global_env)
                                                                    
  [36m[22m[24m  venv/lib/python3.12/site-packages/certifi/core.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.compatibility.python37.python37-compatibility-importlib2[0m
          Found 'importlib.resources', which is a module only available on Python 3.7+. This
          does not work in lower versions, and therefore is not backwards compatible. Use   
          importlib_resources instead for older Python versions.                            
          Details: https://sg.run/eL3y                                                      
                                                                                            
           16‚îÜ from importlib.resources import as_file, files
            ‚ãÆ‚îÜ----------------------------------------
           51‚îÜ from importlib.resources import path as get_path, read_text
                                                                             
  [36m[22m[24m  venv/lib/python3.12/site-packages/charset_normalizer/cd.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
           34‚îÜ decoder =                                                           
               importlib.import_module(f"encodings.{iana_name}").IncrementalDecoder
                                                                                
  [36m[22m[24m  venv/lib/python3.12/site-packages/charset_normalizer/utils.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
          273‚îÜ importlib.import_module(f"encodings.{name}").IncrementalDecoder,
            ‚ãÆ‚îÜ----------------------------------------
          321‚îÜ decoder_a =                                                           
               importlib.import_module(f"encodings.{iana_name_a}").IncrementalDecoder
            ‚ãÆ‚îÜ----------------------------------------
          322‚îÜ decoder_b =                                                           
               importlib.import_module(f"encodings.{iana_name_b}").IncrementalDecoder
                                                                          
  [36m[22m[24m  venv/lib/python3.12/site-packages/click/_termui_impl.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.compatibility.python36.python36-compatibility-Popen1[0m
          the `errors` argument to Popen is only available on Python 3.6+
          Details: https://sg.run/weBP                                   
                                                                         
          427‚îÜ c = subprocess.Popen(
          428‚îÜ     [cmd_absolute],
          429‚îÜ     shell=True,
          430‚îÜ     stdin=subprocess.PIPE,
          431‚îÜ     env=env,
          432‚îÜ     errors="replace",
          433‚îÜ     text=True,
          434‚îÜ )
   
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because
          this call will spawn the command using a shell process. Doing so propagates     
          current shell settings and variables, which makes it much easier for a malicious
          actor to execute commands. Use 'shell=False' instead.                           
          Details: https://sg.run/J92w                                                    
                                                                                          
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mFalse
          429‚îÜ shell=True,
            ‚ãÆ‚îÜ----------------------------------------
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mFalse
          552‚îÜ c = subprocess.Popen(f'{editor} "{filename}"', env=environ, shell=True)
                                                                         
  [36m[22m[24m  venv/lib/python3.12/site-packages/defusedxml/xmlrpc.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use
          defusedxml.xmlrpc instead.                                                     
          Details: https://sg.run/weqY                                                   
                                                                                         
           18‚îÜ from xmlrpc.client import ExpatParser
            ‚ãÆ‚îÜ----------------------------------------
           19‚îÜ from xmlrpc import client as xmlrpc_client
            ‚ãÆ‚îÜ----------------------------------------
           20‚îÜ from xmlrpc import server as xmlrpc_server
            ‚ãÆ‚îÜ----------------------------------------
           21‚îÜ from xmlrpc.client import gzip_decode as _orig_gzip_decode
            ‚ãÆ‚îÜ----------------------------------------
           22‚îÜ from xmlrpc.client import GzipDecodedResponse as _OrigGzipDecodedResponse
            ‚ãÆ‚îÜ----------------------------------------
           25‚îÜ from xmlrpclib import ExpatParser
            ‚ãÆ‚îÜ----------------------------------------
           26‚îÜ import xmlrpclib as xmlrpc_client
            ‚ãÆ‚îÜ----------------------------------------
           29‚îÜ from xmlrpclib import gzip_decode as _orig_gzip_decode
            ‚ãÆ‚îÜ----------------------------------------
           30‚îÜ from xmlrpclib import GzipDecodedResponse as _OrigGzipDecodedResponse
                                                                   
  [36m[22m[24m  venv/lib/python3.12/site-packages/face/sinter.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision
          resistant and is therefore not suitable as a cryptographic signature. Use SHA256
          or SHA3 instead.                                                                
          Details: https://sg.run/ydYx                                                    
                                                                                          
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(code_str.encode('utf8'))
          139‚îÜ code_hash = hashlib.sha1(code_str.encode('utf8')).hexdigest()[:16]
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ndRX                                                      
                                                                                            
          145‚îÜ exec(code, env)
                                                                
  [36m[22m[24m  venv/lib/python3.12/site-packages/glom/cli.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ndRX                                                      
                                                                                            
          222‚îÜ exec(code, env)
                                                                                                   
  [36m[22m[24m  venv/lib/python3.12/site-packages/google/protobuf/internal/api_implementation.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
           43‚îÜ mod = importlib.import_module(mod_name)
                                                                                     
  [36m[22m[24m  venv/lib/python3.12/site-packages/google/protobuf/proto_builder.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision
          resistant and is therefore not suitable as a cryptographic signature. Use SHA256
          or SHA3 instead.                                                                
          Details: https://sg.run/ydYx                                                    
                                                                                          
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256()
           68‚îÜ fields_hash = hashlib.sha1()
                                                                         
  [36m[22m[24m  venv/lib/python3.12/site-packages/httpcore/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous  
          because it allows an attacker to execute arbitrary code on the system. Refactor
          your code not to use 'globals()'.                                              
          Details: https://sg.run/jNzn                                                   
                                                                                         
          141‚îÜ setattr(__locals[__name], "__module__", "httpcore")  # noqa
                                                                                       
  [36m[22m[24m  venv/lib/python3.12/site-packages/httpcore/_async/connection_pool.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.audit.directly-returned-format-string.directly-returned-format-string[0m
          Detected Flask route directly returning a formatted string. This is subject to
          cross-site scripting if user input can reach the string. Consider using the   
          template engine instead and rendering pages with 'render_template()'.         
          Details: https://sg.run/Zv6o                                                  
                                                                                        
          386‚îÜ return f"<{class_name} [{requests_info} | {connection_info}]>"
                                                                                
  [36m[22m[24m  venv/lib/python3.12/site-packages/httpcore/_backends/anyio.py[0m
    ‚ùØ‚ù± [1mpython.django.security.audit.query-set-extra.avoid-query-set-extra[0m
          QuerySet.extra' does not provide safeguards against SQL injection and requires    
          very careful use. SQL injection can lead to critical data being stolen by         
          attackers. Instead of using '.extra', use the Django ORM and parameterized queries
          such as `People.objects.get(name='Bob')`.                                         
          Details: https://sg.run/kXZP                                                      
                                                                                            
           84‚îÜ return self._stream.extra(anyio.streams.tls.TLSAttribute.ssl_object,
               None)                                                               
            ‚ãÆ‚îÜ----------------------------------------
           86‚îÜ return self._stream.extra(anyio.abc.SocketAttribute.local_address, None)
            ‚ãÆ‚îÜ----------------------------------------
           88‚îÜ return self._stream.extra(anyio.abc.SocketAttribute.remote_address, None)
            ‚ãÆ‚îÜ----------------------------------------
           90‚îÜ return self._stream.extra(anyio.abc.SocketAttribute.raw_socket, None)
            ‚ãÆ‚îÜ----------------------------------------
           92‚îÜ sock = self._stream.extra(anyio.abc.SocketAttribute.raw_socket, None)
                                                                                      
  [36m[22m[24m  venv/lib/python3.12/site-packages/httpcore/_sync/connection_pool.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.audit.directly-returned-format-string.directly-returned-format-string[0m
          Detected Flask route directly returning a formatted string. This is subject to
          cross-site scripting if user input can reach the string. Consider using the   
          template engine instead and rendering pages with 'render_template()'.         
          Details: https://sg.run/Zv6o                                                  
                                                                                        
          386‚îÜ return f"<{class_name} [{requests_info} | {connection_info}]>"
                                                                      
  [36m[22m[24m  venv/lib/python3.12/site-packages/httpx/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous  
          because it allows an attacker to execute arbitrary code on the system. Refactor
          your code not to use 'globals()'.                                              
          Details: https://sg.run/jNzn                                                   
                                                                                         
          105‚îÜ setattr(__locals[__name], "__module__", "httpx")  # noqa
                                                                   
  [36m[22m[24m  venv/lib/python3.12/site-packages/httpx/_auth.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision
          resistant and is therefore not suitable as a cryptographic signature. Use SHA256
          or SHA3 instead.                                                                
          Details: https://sg.run/ydYx                                                    
                                                                                          
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(s)
          309‚îÜ return hashlib.sha1(s).hexdigest()[:16].encode()
                                                                                   
  [36m[22m[24m  venv/lib/python3.12/site-packages/importlib_metadata/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
          221‚îÜ module = import_module(self.module)
                                                                             
  [36m[22m[24m  venv/lib/python3.12/site-packages/jsonschema/validators.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://'        
          schemes, so a dynamic value controlled by a malicious actor may allow them to read
          arbitrary files. Audit uses of urllib calls to ensure user data cannot control the
          URLs, or consider using the 'requests' library instead.                           
          Details: https://sg.run/dKZZ                                                      
                                                                                            
          109‚îÜ with urlopen(request) as response:
            ‚ãÆ‚îÜ----------------------------------------
          1205‚îÜ with urlopen(uri) as url:
                                                                                       
  [36m[22m[24m  venv/lib/python3.12/site-packages/jsonschema_specifications/_core.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.compatibility.python37.python37-compatibility-importlib2[0m
          Found 'importlib.resources', which is a module only available on Python 3.7+. This
          does not work in lower versions, and therefore is not backwards compatible. Use   
          importlib_resources instead for older Python versions.                            
          Details: https://sg.run/eL3y                                                      
                                                                                            
            8‚îÜ from importlib.resources import files
                                                                   
  [36m[22m[24m  venv/lib/python3.12/site-packages/mcp/cli/cli.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because  
          this call will spawn the command using a shell process. Doing so propagates     
          current shell settings and variables, which makes it much easier for a malicious
          actor to execute commands. Use 'shell=False' instead.                           
          Details: https://sg.run/J92w                                                    
                                                                                          
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mFalse
           48‚îÜ subprocess.run([cmd, "--version"], check=True, capture_output=True,
               shell=True)                                                        
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
          186‚îÜ server_module = importlib.import_module(module_name)
                                                                                           
  [36m[22m[24m  venv/lib/python3.12/site-packages/opentelemetry/instrumentation/utils.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
          102‚îÜ module = import_module(module_path)
                                                                                   
  [36m[22m[24m  venv/lib/python3.12/site-packages/packaging/licenses/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ZvrD                                                      
                                                                                            
          100‚îÜ invalid = eval(python_expression, globals(), locals())
                                                              
  [36m[22m[24m  venv/lib/python3.12/site-packages/peewee.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          3632‚îÜ cursor.execute('PRAGMA %s = %s;' % (pragma, value))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query
          can result in SQL Injection. In order to execute raw query safely, prepared       
          statement should be used. SQLAlchemy provides TextualSQL to easily used prepared  
          statement with named parameters. For complex SQL composition, use SQL Expression  
          Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a   
          better option.                                                                    
          Details: https://sg.run/2b1L                                                      
                                                                                            
          3632‚îÜ cursor.execute('PRAGMA %s = %s;' % (pragma, value))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          3638‚îÜ cursor.execute('ATTACH DATABASE "%s" AS "%s"' % (db, name))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query
          can result in SQL Injection. In order to execute raw query safely, prepared       
          statement should be used. SQLAlchemy provides TextualSQL to easily used prepared  
          statement with named parameters. For complex SQL composition, use SQL Expression  
          Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a   
          better option.                                                                    
          Details: https://sg.run/2b1L                                                      
                                                                                            
          3638‚îÜ cursor.execute('ATTACH DATABASE "%s" AS "%s"' % (db, name))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          4279‚îÜ curs.execute('SET TRANSACTION ISOLATION LEVEL %s' %
          4280‚îÜ              isolation_level)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query
          can result in SQL Injection. In order to execute raw query safely, prepared       
          statement should be used. SQLAlchemy provides TextualSQL to easily used prepared  
          statement with named parameters. For complex SQL composition, use SQL Expression  
          Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a   
          better option.                                                                    
          Details: https://sg.run/2b1L                                                      
                                                                                            
          4279‚îÜ curs.execute('SET TRANSACTION ISOLATION LEVEL %s' %
          4280‚îÜ              isolation_level)
                                                                           
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_internal/cache.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.sha224-hash.sha224-hash[0m
          This code uses a 224-bit hash function, which is deprecated or disallowed in some
          security policies. Consider updating to a stronger hash function such as SHA-384 
          or higher to ensure compliance and security.                                     
          Details: https://sg.run/Db1Yv                                                    
                                                                                           
           29‚îÜ return hashlib.sha224(s.encode("ascii")).hexdigest()
                                                                                       
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_internal/commands/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
          114‚îÜ module = importlib.import_module(module_path)
                                                                                            
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_internal/commands/configuration.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'check_call' with 'shell=True'. This is dangerous    
          because this call will spawn the command using a shell process. Doing so         
          propagates current shell settings and variables, which makes it much easier for a
          malicious actor to execute commands. Use 'shell=False' instead.                  
          Details: https://sg.run/J92w                                                     
                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mFalse
          239‚îÜ subprocess.check_call(f'{editor} "{fname}"', shell=True)
                                                                                    
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_internal/commands/debug.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.compatibility.python37.python37-compatibility-importlib2[0m
          Found 'importlib.resources', which is a module only available on Python 3.7+. This
          does not work in lower versions, and therefore is not backwards compatible. Use   
          importlib_resources instead for older Python versions.                            
          Details: https://sg.run/eL3y                                                      
                                                                                            
            1‚îÜ import importlib.resources
                                                                                     
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_internal/commands/search.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use
          defusedxml.xmlrpc instead.                                                     
          Details: https://sg.run/weqY                                                   
                                                                                         
            5‚îÜ import xmlrpc.client
                                                                                  
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_internal/network/auth.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Getting          
          credentials from keyring for %s" being logged. This may lead to secret credentials
          being exposed. Make sure that the logger is not logging  sensitive information.   
          Details: https://sg.run/ydNx                                                      
                                                                                            
           85‚îÜ logger.debug("Getting credentials from keyring for %s", url)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Getting password
          from keyring for %s" being logged. This may lead to secret credentials being     
          exposed. Make sure that the logger is not logging  sensitive information.        
          Details: https://sg.run/ydNx                                                     
                                                                                           
           92‚îÜ logger.debug("Getting password from keyring for %s", url)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Found credentials
          in url for %s" being logged. This may lead to secret credentials being exposed.   
          Make sure that the logger is not logging  sensitive information.                  
          Details: https://sg.run/ydNx                                                      
                                                                                            
          346‚îÜ logger.debug("Found credentials in url for %s", netloc)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Found credentials
          in index url for %s" being logged. This may lead to secret credentials being      
          exposed. Make sure that the logger is not logging  sensitive information.         
          Details: https://sg.run/ydNx                                                      
                                                                                            
          362‚îÜ logger.debug("Found credentials in index url for %s", netloc)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Found credentials
          in netrc for %s" being logged. This may lead to secret credentials being exposed. 
          Make sure that the logger is not logging  sensitive information.                  
          Details: https://sg.run/ydNx                                                      
                                                                                            
          369‚îÜ logger.debug("Found credentials in netrc for %s", netloc)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Found credentials
          in keyring for %s" being logged. This may lead to secret credentials being        
          exposed. Make sure that the logger is not logging  sensitive information.         
          Details: https://sg.run/ydNx                                                      
                                                                                            
          382‚îÜ logger.debug("Found credentials in keyring for %s", netloc)
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "401 Error,      
          Credentials not correct for %s" being logged. This may lead to secret credentials
          being exposed. Make sure that the logger is not logging  sensitive information.  
          Details: https://sg.run/ydNx                                                     
                                                                                           
          541‚îÜ logger.warning(
          542‚îÜ     "401 Error, Credentials not correct for %s",
          543‚îÜ     resp.request.url,
          544‚îÜ )
                                                                                    
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_internal/network/xmlrpc.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use
          defusedxml.xmlrpc instead.                                                     
          Details: https://sg.run/weqY                                                   
                                                                                         
            6‚îÜ import xmlrpc.client
            ‚ãÆ‚îÜ----------------------------------------
           14‚îÜ from xmlrpc.client import _HostType, _Marshallable
                                                                                         
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_internal/self_outdated_check.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.sha224-hash.sha224-hash[0m
          This code uses a 224-bit hash function, which is deprecated or disallowed in some
          security policies. Consider updating to a stronger hash function such as SHA-384 
          or higher to ensure compliance and security.                                     
          Details: https://sg.run/Db1Yv                                                    
                                                                                           
           38‚îÜ name = hashlib.sha224(key_bytes).hexdigest()
                                                                                      
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_internal/utils/subprocess.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.compatibility.python36.python36-compatibility-Popen1[0m
          the `errors` argument to Popen is only available on Python 3.6+
          Details: https://sg.run/weBP                                   
                                                                         
          141‚îÜ proc = subprocess.Popen(
          142‚îÜ     # Convert HiddenText objects to the underlying str.
          143‚îÜ     reveal_command_args(cmd),
          144‚îÜ     stdin=subprocess.PIPE,
          145‚îÜ     stdout=subprocess.PIPE,
          146‚îÜ     stderr=subprocess.STDOUT if not stdout_only else subprocess.PIPE,
          147‚îÜ     cwd=cwd,
          148‚îÜ     env=env,
          149‚îÜ     errors="backslashreplace",
          150‚îÜ )
                                                                                     
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_internal/utils/unpacking.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `$BITS` are widely permissive and grant access to more people   
          than may be necessary. A good default is `0o644` which gives read and write access
          to yourself and read access to everyone else.                                     
          Details: https://sg.run/AXY4                                                      
                                                                                            
           93‚îÜ os.chmod(path, (0o777 & ~current_umask() | 0o111))
                                                                                     
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/cachecontrol/_cmd.py[0m
     ‚ù± [1mpython.lang.security.audit.insecure-transport.requests.request-session-with-http.request-[0m
  [1m     session-with-http[0m                                                                        
          Detected a request using 'http://'. This request will be unencrypted. Use
          'https://' instead.                                                      
          Details: https://sg.run/DoBY                                             
                                                                                   
           33‚îÜ sess.mount("http://", adapter)
                                                                                                  
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.sha224-hash.sha224-hash[0m
          This code uses a 224-bit hash function, which is deprecated or disallowed in some
          security policies. Consider updating to a stronger hash function such as SHA-384 
          or higher to ensure compliance and security.                                     
          Details: https://sg.run/Db1Yv                                                    
                                                                                           
           95‚îÜ return hashlib.sha224(x.encode()).hexdigest()
                                                                                
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/certifi/core.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.compatibility.python37.python37-compatibility-importlib2[0m
          Found 'importlib.resources', which is a module only available on Python 3.7+. This
          does not work in lower versions, and therefore is not backwards compatible. Use   
          importlib_resources instead for older Python versions.                            
          Details: https://sg.run/eL3y                                                      
                                                                                            
           13‚îÜ from importlib.resources import as_file, files
            ‚ãÆ‚îÜ----------------------------------------
           47‚îÜ from importlib.resources import path as get_path, read_text
                                                                                  
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/distlib/compat.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use
          defusedxml.xmlrpc instead.                                                     
          Details: https://sg.run/weqY                                                   
                                                                                         
           42‚îÜ import xmlrpclib
            ‚ãÆ‚îÜ----------------------------------------
           81‚îÜ import xmlrpc.client as xmlrpclib
                                                                                
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/distlib/util.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.httpsconnection-detected.httpsconnection-detected[0m
          The HTTPSConnection API has changed frequently with minor releases of Python.     
          Ensure you are using the API for your version of Python securely. For example,    
          Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See 
          https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for
          more information.                                                                 
          Details: https://sg.run/8yby                                                      
                                                                                            
          1601‚îÜ self._connection = host, httplib.HTTPSConnection(
          1602‚îÜ     h, None, **kwargs)
                                                                                          
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/pkg_resources/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous  
          because it allows an attacker to execute arbitrary code on the system. Refactor
          your code not to use 'globals()'.                                              
          Details: https://sg.run/jNzn                                                   
                                                                                         
          151‚îÜ state[k] = g['_sget_' + v](g[k])
            ‚ãÆ‚îÜ----------------------------------------
          151‚îÜ state[k] = g['_sget_' + v](g[k])
            ‚ãÆ‚îÜ----------------------------------------
          158‚îÜ g['_sset_' + _state_vars[k]](k, g[k], v)
            ‚ãÆ‚îÜ----------------------------------------
          158‚îÜ g['_sset_' + _state_vars[k]](k, g[k], v)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ndRX                                                      
                                                                                            
          1561‚îÜ exec(code, namespace, namespace)
            ‚ãÆ‚îÜ----------------------------------------
          1572‚îÜ exec(script_code, namespace, namespace)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
          2290‚îÜ importlib.import_module(packageName)
                                                                                                
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ndRX                                                      
                                                                                            
          103‚îÜ exec(f.read(), custom_namespace)
                                                                                            
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/pygments/lexers/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ndRX                                                      
                                                                                            
          153‚îÜ exec(f.read(), custom_namespace)
                                                                                      
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/pygments/unistring.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous  
          because it allows an attacker to execute arbitrary code on the system. Refactor
          your code not to use 'globals()'.                                              
          Details: https://sg.run/jNzn                                                   
                                                                                         
           83‚îÜ return ''.join(globals()[cat] for cat in args)
            ‚ãÆ‚îÜ----------------------------------------
           90‚îÜ return ''.join(globals()[cat] for cat in newcats)
                                                                                              
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/pyparsing/diagram/__init__.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping
          which opens up the application to cross-site scripting (XSS) vulnerabilities.     
          Prefer using the Flask method 'render_template()' and templates with a '.html'    
          extension in order to prevent XSS.                                                
          Details: https://sg.run/RoKe                                                      
                                                                                            
          157‚îÜ return template.render(diagrams=data, embed=embed, **kwargs)
                                                                                                      
  [36m[22m[24m                                                                                        
  venv/lib/python3.12/site-packages/pip/_vendor/pyproject_hooks/_in_process/__init__.py[0m            
   ‚ùØ‚ùØ‚ù± [1mpython.lang.compatibility.python37.python37-compatibility-importlib2[0m
          Found 'importlib.resources', which is a module only available on Python 3.7+. This
          does not work in lower versions, and therefore is not backwards compatible. Use   
          importlib_resources instead for older Python versions.                            
          Details: https://sg.run/eL3y                                                      
                                                                                            
            7‚îÜ import importlib.resources as resources
                                                                                                      
  [36m[22m[24m                                                                                        
  venv/lib/python3.12/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py[0m         
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
           77‚îÜ obj = import_module(mod_path)
   
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous  
          because it allows an attacker to execute arbitrary code on the system. Refactor
          your code not to use 'globals()'.                                              
          Details: https://sg.run/jNzn                                                   
                                                                                         
          329‚îÜ hook = globals()[hook_name]
                                                                                 
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/requests/auth.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision
          resistant and is therefore not suitable as a cryptographic signature. Use SHA256
          or SHA3 instead.                                                                
          Details: https://sg.run/ydYx                                                    
                                                                                          
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(x)
          156‚îÜ return hashlib.sha1(x).hexdigest()
            ‚ãÆ‚îÜ----------------------------------------
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(s)
          205‚îÜ cnonce = hashlib.sha1(s).hexdigest()[:16]
                                                                              
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/rich/style.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously
          constructed data. Never unmarshal data received from an untrusted or            
          unauthenticated source. See more details:                                       
          https://docs.python.org/3/library/marshal.html?highlight=security               
          Details: https://sg.run/3xor                                                    
                                                                                          
          191‚îÜ self._meta = None if meta is None else dumps(meta)
            ‚ãÆ‚îÜ----------------------------------------
          242‚îÜ style._meta = dumps(meta)
            ‚ãÆ‚îÜ----------------------------------------
          475‚îÜ return {} if self._meta is None else cast(Dict[str, Any],
               loads(self._meta))                                       
            ‚ãÆ‚îÜ----------------------------------------
          751‚îÜ new_style._meta = dumps({**self.meta, **style.meta})
                                                                                   
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/truststore/_api.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers[0m
          The 'ssl' module disables insecure cipher suites by default. Therefore, use of  
          'set_ciphers()' should only be used when you have very specialized requirements.
          Otherwise, you risk lowering the security of the SSL channel.                   
          Details: https://sg.run/0Q0v                                                    
                                                                                          
          160‚îÜ return self._ctx.set_ciphers(__cipherlist)
                                                                                             
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.weak-ssl-version.weak-ssl-version[0m
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
          are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or 
          higher.                                                                          
          Details: https://sg.run/RoZO                                                     
                                                                                           
           99‚îÜ ssl.PROTOCOL_TLSv1: OpenSSL.SSL.TLSv1_METHOD,
            ‚ãÆ‚îÜ----------------------------------------
          103‚îÜ _openssl_versions[ssl.PROTOCOL_SSLv3] = OpenSSL.SSL.SSLv3_METHOD
            ‚ãÆ‚îÜ----------------------------------------
          106‚îÜ _openssl_versions[ssl.PROTOCOL_TLSv1_1] = OpenSSL.SSL.TLSv1_1_METHOD
                                                                                                   
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/urllib3/contrib/securetransport.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.weak-ssl-version.weak-ssl-version[0m
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
          are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or 
          higher.                                                                          
          Details: https://sg.run/RoZO                                                     
                                                                                           
          163‚îÜ _protocol_to_min_max[ssl.PROTOCOL_SSLv2] = (
            ‚ãÆ‚îÜ----------------------------------------
          168‚îÜ _protocol_to_min_max[ssl.PROTOCOL_SSLv3] = (
            ‚ãÆ‚îÜ----------------------------------------
          173‚îÜ _protocol_to_min_max[ssl.PROTOCOL_TLSv1] = (
            ‚ãÆ‚îÜ----------------------------------------
          178‚îÜ _protocol_to_min_max[ssl.PROTOCOL_TLSv1_1] = (
                                                                                     
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/urllib3/util/ssl_.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated[0m
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket
          without server name indication or hostname matching. Instead, create an SSL
          context using 'ssl.SSLContext()' and use that to wrap a socket.            
          Details: https://sg.run/PJOY                                               
                                                                                     
          179‚îÜ return wrap_socket(socket, ciphers=self.ciphers, **kwargs)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers[0m
          The 'ssl' module disables insecure cipher suites by default. Therefore, use of  
          'set_ciphers()' should only be used when you have very specialized requirements.
          Otherwise, you risk lowering the security of the SSL channel.                   
          Details: https://sg.run/0Q0v                                                    
                                                                                          
          292‚îÜ context.set_ciphers(ciphers or DEFAULT_CIPHERS)
                                                                                         
  [36m[22m[24m  venv/lib/python3.12/site-packages/pip/_vendor/webencodings/mklabels.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://'        
          schemes, so a dynamic value controlled by a malicious actor may allow them to read
          arbitrary files. Audit uses of urllib calls to ensure user data cannot control the
          URLs, or consider using the 'requests' library instead.                           
          Details: https://sg.run/dKZZ                                                      
                                                                                            
           47‚îÜ for category in json.loads(urlopen(url).read().decode('ascii'))
                                                                          
  [36m[22m[24m  venv/lib/python3.12/site-packages/playhouse/apsw_ext.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          112‚îÜ self.cursor().execute('begin %s;' % lock_type)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query
          can result in SQL Injection. In order to execute raw query safely, prepared       
          statement should be used. SQLAlchemy provides TextualSQL to easily used prepared  
          statement with named parameters. For complex SQL composition, use SQL Expression  
          Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a   
          better option.                                                                    
          Details: https://sg.run/2b1L                                                      
                                                                                            
          112‚îÜ self.cursor().execute('begin %s;' % lock_type)
                                                                             
  [36m[22m[24m  venv/lib/python3.12/site-packages/playhouse/cockroachdb.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          153‚îÜ self.cursor().execute('SET TRANSACTION PRIORITY %s' % priority)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query
          can result in SQL Injection. In order to execute raw query safely, prepared       
          statement should be used. SQLAlchemy provides TextualSQL to easily used prepared  
          statement with named parameters. For complex SQL composition, use SQL Expression  
          Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a   
          better option.                                                                    
          Details: https://sg.run/2b1L                                                      
                                                                                            
          153‚îÜ self.cursor().execute('SET TRANSACTION PRIORITY %s' % priority)
                                                                        
  [36m[22m[24m  venv/lib/python3.12/site-packages/playhouse/fields.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities.
          When unpickling, the serialized data could be manipulated to run arbitrary code.
          Instead, consider serializing the relevant data as JSON or a similar text-based 
          serialization format.                                                           
          Details: https://sg.run/eLxb                                                    
                                                                                          
           55‚îÜ return pickle.loads(value)
   
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. 
          When unpickling, the serialized data could be manipulated to run arbitrary code.
          Instead, consider serializing the relevant data as JSON or a similar text-based 
          serialization format.                                                           
          Details: https://sg.run/OPwB                                                    
                                                                                          
           55‚îÜ return pickle.loads(value)
   
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities.
          When unpickling, the serialized data could be manipulated to run arbitrary code.
          Instead, consider serializing the relevant data as JSON or a similar text-based 
          serialization format.                                                           
          Details: https://sg.run/eLxb                                                    
                                                                                          
           59‚îÜ pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)
   
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. 
          When unpickling, the serialized data could be manipulated to run arbitrary code.
          Instead, consider serializing the relevant data as JSON or a similar text-based 
          serialization format.                                                           
          Details: https://sg.run/OPwB                                                    
                                                                                          
           59‚îÜ pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)
                                                                              
  [36m[22m[24m  venv/lib/python3.12/site-packages/playhouse/postgres_ext.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-uuid-version.insecure-uuid-version[0m
          Using UUID version 1 for UUID generation can lead to predictable UUIDs based on   
          system information (e.g., MAC address, timestamp). This may lead to security risks
          such as the sandwich attack. Consider using `uuid.uuid4()` instead for better     
          randomness and security.                                                          
          Details: https://sg.run/BYBgW                                                     
                                                                                            
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0muuid.uuid4()
          488‚îÜ curs = self._state.conn.cursor(name=str(uuid.uuid1()),
                                                                            
  [36m[22m[24m  venv/lib/python3.12/site-packages/playhouse/reflection.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          388‚îÜ cursor = self.execute('SELECT * FROM `%s` LIMIT 1' % table)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query
          can result in SQL Injection. In order to execute raw query safely, prepared       
          statement should be used. SQLAlchemy provides TextualSQL to easily used prepared  
          statement with named parameters. For complex SQL composition, use SQL Expression  
          Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a   
          better option.                                                                    
          Details: https://sg.run/2b1L                                                      
                                                                                            
          388‚îÜ cursor = self.execute('SELECT * FROM `%s` LIMIT 1' % table)
                                                                               
  [36m[22m[24m  venv/lib/python3.12/site-packages/playhouse/sqlcipher_ext.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           77‚îÜ conn.execute("PRAGMA key='%s'" % passphrase)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query
          can result in SQL Injection. In order to execute raw query safely, prepared       
          statement should be used. SQLAlchemy provides TextualSQL to easily used prepared  
          statement with named parameters. For complex SQL composition, use SQL Expression  
          Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a   
          better option.                                                                    
          Details: https://sg.run/2b1L                                                      
                                                                                            
           77‚îÜ conn.execute("PRAGMA key='%s'" % passphrase)
                                                                         
  [36m[22m[24m  venv/lib/python3.12/site-packages/pydantic/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
          439‚îÜ result = import_module(f'.{attr_name}', package=package)
            ‚ãÆ‚îÜ----------------------------------------
          443‚îÜ module = import_module(module_name, package=package)
                                                                                      
  [36m[22m[24m  venv/lib/python3.12/site-packages/pydantic/_internal/_validators.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
          108‚îÜ module = import_module(module_path)
                                                                                 
  [36m[22m[24m  venv/lib/python3.12/site-packages/pydantic/deprecated/parse.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. 
          When unpickling, the serialized data could be manipulated to run arbitrary code.
          Instead, consider serializing the relevant data as JSON or a similar text-based 
          serialization format.                                                           
          Details: https://sg.run/OPwB                                                    
                                                                                          
           54‚îÜ return pickle.loads(bb)
                                                                            
  [36m[22m[24m  venv/lib/python3.12/site-packages/pydantic/v1/generics.py[0m
     ‚ù± [1mpython.lang.security.audit.dangerous-annotations-usage.dangerous-annotations-usage[0m
          Annotations passed to `typing.get_type_hints` are evaluated in `globals` and
          `locals` namespaces. Make sure that no arbitrary value can be written as the
          annotation and passed to `typing.get_type_hints` function.                  
          Details: https://sg.run/8R6J                                                
                                                                                      
          400‚îÜ created_model.__annotations__[key] = concrete_type
                                                                         
  [36m[22m[24m  venv/lib/python3.12/site-packages/pydantic/v1/parse.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. 
          When unpickling, the serialized data could be manipulated to run arbitrary code.
          Instead, consider serializing the relevant data as JSON or a similar text-based 
          serialization format.                                                           
          Details: https://sg.run/OPwB                                                    
                                                                                          
           42‚îÜ return pickle.loads(bb)
                                                                         
  [36m[22m[24m  venv/lib/python3.12/site-packages/pydantic/v1/utils.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
          134‚îÜ module = import_module(module_path)
                                                                           
  [36m[22m[24m  venv/lib/python3.12/site-packages/pydantic/v1/version.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
           25‚îÜ import_module(p.replace('-', '_'))
                                                                                    
  [36m[22m[24m  venv/lib/python3.12/site-packages/pygments/formatters/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ndRX                                                      
                                                                                            
          103‚îÜ exec(f.read(), custom_namespace)
                                                                                
  [36m[22m[24m  venv/lib/python3.12/site-packages/pygments/lexers/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ndRX                                                      
                                                                                            
          154‚îÜ exec(f.read(), custom_namespace)
                                                                                     
  [36m[22m[24m  venv/lib/python3.12/site-packages/pygments/lexers/_lua_builtins.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-transport.urllib.insecure-urlopen.insecure-urlopen[0m
          Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted.
          Use 'https://' instead.                                                         
          Details: https://sg.run/oxB9                                                    
                                                                                          
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0murlopen('https://www.lua.org/manual/')
          225‚îÜ f = urlopen('http://www.lua.org/manual/')
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://'        
          schemes, so a dynamic value controlled by a malicious actor may allow them to read
          arbitrary files. Audit uses of urllib calls to ensure user data cannot control the
          URLs, or consider using the 'requests' library instead.                           
          Details: https://sg.run/dKZZ                                                      
                                                                                            
          233‚îÜ f = urlopen(f'http://www.lua.org/manual/{version}/')
                                                                                     
  [36m[22m[24m  venv/lib/python3.12/site-packages/pygments/lexers/_php_builtins.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve.insecure-[0m
  [1m     urlretrieve[0m                                                                        
          Detected 'urllib.urlretrieve()' using 'http://'. This request will not be
          encrypted. Use 'https://' instead.                                       
          Details: https://sg.run/1Zqw                                             
                                                                                   
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mPHP_MANUAL_URL     =                                  
              'https://us3.php.net/distributions/manual/php_manual_en.tar.gz'  
              PHP_MANUAL_DIR     = './php-chunked-xhtml/' PHP_REFERENCE_GLOB = 
              'ref.*' PHP_FUNCTION_RE    = r'<a                                
              href="function\..*?\.html">(.*?)</a>' PHP_MODULE_RE      =       
              '<title>(.*?) Functions</title>'  def get_php_functions():       
              function_re = re.compile(PHP_FUNCTION_RE) module_re   =          
              re.compile(PHP_MODULE_RE) modules     = {}  for file in          
              get_php_references(): module = '' with open(file,                
              encoding='utf-8') as f: for line in f: if not module: search =   
              module_re.search(line) if search: module = search.group(1)       
              modules[module] = []  elif 'href="function.' in line: for match  
              in function_re.finditer(line): fn = match.group(1) if '¬ª' not in 
              fn and '¬´' not in fn and \ '::' not in fn and '\\' not in fn and 
              \ fn not in modules[module]: modules[module].append(fn)  if      
              module: # These are dummy manual pages, not actual functions if  
              module == 'Filesystem': modules[module].remove('delete')  if not 
              modules[module]: del modules[module]  for key in modules:        
              modules[key] = tuple(modules[key]) return modules  def           
              get_php_references(): download = urlretrieve(PHP_MANUAL_URL) with
              tarfile.open(download[0]) as tar: tar.extractall() yield from    
              glob.glob(f"{PHP_MANUAL_DIR}{PHP_REFERENCE_GLOB}")               
              os.remove(download[0])                                           
          3257‚îÜ PHP_MANUAL_URL     =                                         
               'http://us3.php.net/distributions/manual/php_manual_en.tar.gz'
          3258‚îÜ PHP_MANUAL_DIR     = './php-chunked-xhtml/'
          3259‚îÜ PHP_REFERENCE_GLOB = 'ref.*'
          3260‚îÜ PHP_FUNCTION_RE    = r'<a href="function\..*?\.html">(.*?)</a>'
          3261‚îÜ PHP_MODULE_RE      = '<title>(.*?) Functions</title>'
          3262‚îÜ
          3263‚îÜ def get_php_functions():
          3264‚îÜ     function_re = re.compile(PHP_FUNCTION_RE)
          3265‚îÜ     module_re   = re.compile(PHP_MODULE_RE)
          3266‚îÜ     modules     = {}
             [hid 37 additional lines, adjust with --max-lines-per-finding] 
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0murlretrieve(PHP_MANUAL_URL)
          3299‚îÜ download = urlretrieve(PHP_MANUAL_URL)
   
   ‚ùØ‚ùØ‚ù± [1mtrailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal[0m
          Possible path traversal through `tarfile.open($PATH).extractall()` if the source
          tar is controlled by an attacker                                                
          Details: https://sg.run/2RLD                                                    
                                                                                          
          3300‚îÜ with tarfile.open(download[0]) as tar:
          3301‚îÜ     tar.extractall()
                                                                          
  [36m[22m[24m  venv/lib/python3.12/site-packages/pygments/unistring.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous  
          because it allows an attacker to execute arbitrary code on the system. Refactor
          your code not to use 'globals()'.                                              
          Details: https://sg.run/jNzn                                                   
                                                                                         
           83‚îÜ return ''.join(globals()[cat] for cat in args)
            ‚ãÆ‚îÜ----------------------------------------
           90‚îÜ return ''.join(globals()[cat] for cat in newcats)
                                                                     
  [36m[22m[24m  venv/lib/python3.12/site-packages/requests/auth.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision
          resistant and is therefore not suitable as a cryptographic signature. Use SHA256
          or SHA3 instead.                                                                
          Details: https://sg.run/ydYx                                                    
                                                                                          
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(x)
          156‚îÜ return hashlib.sha1(x).hexdigest()
            ‚ãÆ‚îÜ----------------------------------------
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(s)
          205‚îÜ cnonce = hashlib.sha1(s).hexdigest()[:16]
                                                                       
  [36m[22m[24m  venv/lib/python3.12/site-packages/requests/compat.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
           36‚îÜ chardet = importlib.import_module(lib)
                                                                  
  [36m[22m[24m  venv/lib/python3.12/site-packages/rich/style.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously
          constructed data. Never unmarshal data received from an untrusted or            
          unauthenticated source. See more details:                                       
          https://docs.python.org/3/library/marshal.html?highlight=security               
          Details: https://sg.run/3xor                                                    
                                                                                          
          191‚îÜ self._meta = None if meta is None else dumps(meta)
            ‚ãÆ‚îÜ----------------------------------------
          242‚îÜ style._meta = dumps(meta)
            ‚ãÆ‚îÜ----------------------------------------
          475‚îÜ return {} if self._meta is None else cast(Dict[str, Any],
               loads(self._meta))                                       
            ‚ãÆ‚îÜ----------------------------------------
          751‚îÜ new_style._meta = dumps({**self.meta, **style.meta})
                                                                        
  [36m[22m[24m  venv/lib/python3.12/site-packages/ruamel/yaml/main.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
           87‚îÜ self.plug_ins.append(import_module(file_name))
                                                                                
  [36m[22m[24m  venv/lib/python3.12/site-packages/semgrep/commands/install.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `os.stat(semgrep_pro_path_tmp).st_mode         | stat.S_IEXEC  
          | stat.S_IXGRP         | stat.S_IXOTH` are widely permissive and grant access to 
          more people than may be necessary. A good default is `0o644` which gives read and
          write access to yourself and read access to everyone else.                       
          Details: https://sg.run/AXY4                                                     
                                                                                           
          179‚îÜ os.chmod(
          180‚îÜ     semgrep_pro_path_tmp,
          181‚îÜ     os.stat(semgrep_pro_path_tmp).st_mode
          182‚îÜ     | stat.S_IEXEC
          183‚îÜ     | stat.S_IXGRP
          184‚îÜ     | stat.S_IXOTH,
          185‚îÜ )
                                                                                          
  [36m[22m[24m  venv/lib/python3.12/site-packages/semgrep/console_scripts/entrypoint.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.compatibility.python37.python37-compatibility-importlib2[0m
          Found 'importlib.resources', which is a module only available on Python 3.7+. This
          does not work in lower versions, and therefore is not backwards compatible. Use   
          importlib_resources instead for older Python versions.                            
          Details: https://sg.run/eL3y                                                      
                                                                                            
           30‚îÜ import importlib.resources
                                                                   
  [36m[22m[24m  venv/lib/python3.12/site-packages/semgrep/rpc.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.compatibility.python36.python36-compatibility-Popen2[0m
          the `encoding` argument to Popen is only available on Python 3.6+
          Details: https://sg.run/x1Dg                                     
                                                                           
          146‚îÜ with subprocess.Popen(
          147‚îÜ     cmd,
          148‚îÜ     stdin=subprocess.PIPE,
          149‚îÜ     stdout=subprocess.PIPE,
          150‚îÜ     text=True,
          151‚îÜ     encoding=ENCODING,
          152‚îÜ ) as proc:
                                                                            
  [36m[22m[24m  venv/lib/python3.12/site-packages/semgrep/semgrep_core.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.compatibility.python37.python37-compatibility-importlib2[0m
          Found 'importlib.resources', which is a module only available on Python 3.7+. This
          does not work in lower versions, and therefore is not backwards compatible. Use   
          importlib_resources instead for older Python versions.                            
          Details: https://sg.run/eL3y                                                      
                                                                                            
           13‚îÜ import importlib.resources
                                                                            
  [36m[22m[24m  venv/lib/python3.12/site-packages/starlette/templating.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping
          which opens up the application to cross-site scripting (XSS) vulnerabilities.     
          Prefer using the Flask method 'render_template()' and templates with a '.html'    
          extension in order to prevent XSS.                                                
          Details: https://sg.run/RoKe                                                      
                                                                                            
          116‚îÜ return jinja2.Environment(**env_options)
                                                                            
  [36m[22m[24m  venv/lib/python3.12/site-packages/starlette/testclient.py[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.lang.security.detect-insecure-websocket.detect-insecure-websocket[0m
          Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all
          WebSocket connections.                                                    
          Details: https://sg.run/GWyz                                              
                                                                                    
          658‚îÜ url = urljoin("ws://testserver", url)
                                                                         
  [36m[22m[24m  venv/lib/python3.12/site-packages/typing_extensions.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ZvrD                                                      
                                                                                            
          4034‚îÜ value if not isinstance(value, str) else eval(value, globals, locals)
            ‚ãÆ‚îÜ----------------------------------------
          4116‚îÜ value = eval(code, globals, locals)
                                                                                        
  [36m[22m[24m  venv/lib/python3.12/site-packages/typing_inspection/typing_objects.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic   
          content. If this content can be input from outside the program, this may be a code
          injection vulnerability. Ensure evaluated content is not definable by external    
          sources.                                                                          
          Details: https://sg.run/ndRX                                                      
                                                                                            
          101‚îÜ exec(func_code, globals_, locals_)
            ‚ãÆ‚îÜ----------------------------------------
          133‚îÜ exec(func_code, globals_, locals_)
                                                                                        
  [36m[22m[24m  venv/lib/python3.12/site-packages/urllib3/contrib/emscripten/fetch.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.compatibility.python37.python37-compatibility-importlib2[0m
          Found 'importlib.resources', which is a module only available on Python 3.7+. This
          does not work in lower versions, and therefore is not backwards compatible. Use   
          importlib_resources instead for older Python versions.                            
          Details: https://sg.run/eL3y                                                      
                                                                                            
           42‚îÜ from importlib.resources import files
                                                                                 
  [36m[22m[24m  venv/lib/python3.12/site-packages/urllib3/contrib/pyopenssl.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.weak-ssl-version.weak-ssl-version[0m
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions
          are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or 
          higher.                                                                          
          Details: https://sg.run/RoZO                                                     
                                                                                           
           73‚îÜ ssl.PROTOCOL_TLSv1: OpenSSL.SSL.TLSv1_METHOD,
            ‚ãÆ‚îÜ----------------------------------------
           77‚îÜ _openssl_versions[ssl.PROTOCOL_TLSv1_1] = OpenSSL.SSL.TLSv1_1_METHOD
                                                                         
  [36m[22m[24m  venv/lib/python3.12/site-packages/urllib3/util/ssl_.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers[0m
          The 'ssl' module disables insecure cipher suites by default. Therefore, use of  
          'set_ciphers()' should only be used when you have very specialized requirements.
          Otherwise, you risk lowering the security of the SSL channel.                   
          Details: https://sg.run/0Q0v                                                    
                                                                                          
          311‚îÜ context.set_ciphers(ciphers)
                                                                      
  [36m[22m[24m  venv/lib/python3.12/site-packages/uvicorn/config.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers[0m
          The 'ssl' module disables insecure cipher suites by default. Therefore, use of  
          'set_ciphers()' should only be used when you have very specialized requirements.
          Otherwise, you risk lowering the security of the SSL channel.                   
          Details: https://sg.run/0Q0v                                                    
                                                                                          
          120‚îÜ ctx.set_ciphers(ciphers)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `uds_perms` are widely permissive and grant access to more      
          people than may be necessary. A good default is `0o644` which gives read and write
          access to yourself and read access to everyone else.                              
          Details: https://sg.run/AXY4                                                      
                                                                                            
          506‚îÜ os.chmod(self.uds, uds_perms)
                                                                        
  [36m[22m[24m  venv/lib/python3.12/site-packages/uvicorn/importer.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to
          load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a 
          whitelist to prevent running untrusted code.                                      
          Details: https://sg.run/y6Jk                                                      
                                                                                            
           19‚îÜ module = importlib.import_module(module_str)
